To create a new repository in Git, use git init.

ls -a - list the files in a directory
git init - create new repository
git status - find out which files have changed since last commit
git add - add a file to the repository
git commit - creates a commit for the changes
cd .. - return to parent directory
git branch - see branches; star next to name indicates the one in use
git banch 'name' - creates new branch 'name'; use git checkout name to switch branches
git log --graph --oneline branch1 branch2 - creates a visualization of branch structure 
git checkout -b new_branch_name - creates and starts working on a new branch 

1) What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, Git creates a new empty repository. This is needed to store a new directory of
files which you can then log commits into.

2) How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is where you can make changes to files before you add them to the repository for a final commit.
The directory is where the files are stored in a general sense, before being added to the repository on git. The
value of the staging area is that you don't have to commit every change you've ever made into the repository, just the
specific ones you make starting from a certain point.

3) How can you use the staging area to make sure you have one commit per logical change?

When a file is in the staging area you can use git diff to find out which changes have been made. This helps you to
make sure you don't overwhelm the commit with changes that aren't logically connected. 

branch - label for separate commits
master - main branch in repository
detached head - when you're working on a commit without a branch name, meaning that you'll build on the previous commit
merge - combine two commits (ie your experimental branch is good and you want to add it to the master branch now)

4) What are some situations when branches would be helpful in keeping you history organized? How would branches help?

If you want to test out an update to your program, or make a temporary change, then you can create a branch for it
instead of having to hop back and forth between commit ids and trying to remember when you made the change, or if you
saved multiple experimental changes.

Branches are good for collab, multiple people can work on multiple things ie bug fixes, new features, new language
and then save to different branches until it can come together in a merged branch.

5) How do diagrams help you visualize the branch structure?

They show exactly where branches were created to know whats in the branch or not and then it will help you to know where you want to create the merge in the future. Diagrams are a visualization of the branches.



